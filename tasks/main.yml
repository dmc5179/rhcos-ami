---
# tasks file for rhcos-ami

- name: Set baseurl if using nightly builds
  set_fact:
    base_url: '{{ pre_release_url }}'
  when:
    - rhcos_ver | length > 7

# Set a large timeout as it could take awhile to download the file
- name: Download the VMDK file
  get_url:
    url: "{{ base_url }}/rhcos-{{ rhcos_ver }}-x86_64-aws.x86_64.vmdk.gz"
    dest: "{{ vmdk_tmp }}"
    mode: '0644'
    timeout: 600
  tags:
    - download

# EC2 Import Snapshot will not take a compressed archive like gzip
- name: Decompress the VMDK file
  command: gunzip "{{ vmdk_tmp }}/rhcos-{{ rhcos_ver }}-x86_64-aws.x86_64.vmdk.gz"
  tags:
    - decompress

# TODO: Hardcoded to put the vmdk into the root of the S3 bucket.
#       Update role to support non-root directory level
- name: Upload VMDK to S3 Bucket
  aws_s3:
    bucket: "{{ s3_bucket }}"
    src: "{{ vmdk_tmp }}/rhcos-{{ rhcos_ver }}-x86_64-aws.x86_64.vmdk"
    object: "rhcos-{{ rhcos_ver }}-x86_64-aws.x86_64.vmdk"
    mode: put
    overwrite: 'true'
  tags:
    - upload

- name: Remove the decompressed VMDK from the local system
  file:
    path: "{{ vmdk_tmp }}/rhcos-{{ rhcos_ver }}-x86_64-aws.x86_64.vmdk"
    state: absent
  when: (cleanup_local | bool)
  tags:
    - cleanup

# This requires that your IAM user is allowed to create the role
# This step can be skipped if the role already exists
- name: Create VMImport Role in AWS
  import_role:
    name: rubrik-devops.aws-vmimport-role
  vars:
    s3_bucket_name: "{{ s3_bucket }}"
    s3_bucket_arn: "{{ s3_arn_prefix }}:::{{  s3_bucket }}"
  when: (create_role | bool)
  tags:
    - create_role

- name: Create temporary file
  ansible.builtin.tempfile:
    state: file
    suffix: snapshot
  register: tempfile_1

- name: Create JSON file for use with importing snapshot
  template:
    src: containers.json.j2
    dest: '{{ tempfile_1.path }}'

- name: Import Snapshot from RHCOS VMDK in S3
  command: |
    aws ec2 import-snapshot \
    --description "Red Hat CoreOS {{ rhcos_ver }} VMDK" \
    --disk-container "file://{{ tempfile_1.path }}" \
    --output text --query 'ImportTaskId'
  register: import_snapshot

- name: Wait for snapshot import to complete
  command: aws ec2 describe-import-snapshot-tasks \
           --import-task-ids "{{ import_snapshot.stdout }}" \
           --output text \
           --query 'ImportSnapshotTasks[*].SnapshotTaskDetail.Status'
  register: snapshot_status
  until: snapshot_status.stdout == 'completed'
  retries: 60
  delay: 30

- name: Remove temp file after import snapshot
  file:
    path: '{{ tempfile_1.path }}'
    state: absent
  when: (cleanup_local | bool)
  tags:
    - cleanup

- name: Get the snapshot id
  command: aws ec2 describe-import-snapshot-tasks \
           --import-task-ids "{{ import_snapshot.stdout }}" \
           --output text \
           --query 'ImportSnapshotTasks[*].SnapshotTaskDetail.SnapshotId'
  register: snapshot_id

# TODO: There should be an ephemeral device on /dev/xvdb
- name: Register AMI against the snapshot
  ec2_ami:
    name: "rhcos-{{ rhcos_ver }}-x86_64"
    state: present
    architecture: x86_64
    virtualization_type: hvm
    enhanced_networking: '{{ ena_supported }}'
    root_device_name: '{{ device_name }}'
    wait: true
    device_mapping:
      - device_name: '{{ device_name }}'
        volume_size: '{{ volume_size }}'
        delete_on_termination: true
        volume_type: '{{ volume_type }}'
        snapshot_id: "{{ snapshot_id.stdout }}"
  tags:
    - register

- name: Cleanup the VMDK file on S3
  aws_s3:
    bucket: "{{ s3_bucket }}"
    object: "/rhcos-{{ rhcos_ver }}-x86_64-aws.x86_64.vmdk"
    mode: delobj
  when: (cleanup_s3 | bool)
  tags:
    - cleanup
